{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>\u8bb0\u5f55\u5b66\u4e60 IT \u6280\u672f</p>"},{"location":"redis/%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/Strings/","title":"Strings","text":""},{"location":"redis/%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/Strings/#_1","title":"\u7279\u70b9","text":"<p>Redis \u5b57\u7b26\u4e32\u7528\u6765\u5b58\u50a8\u5b57\u8282\u5e8f\u5217\uff0c\u5305\u62ec\u6587\u672c\u5e8f\u5217\u5316\u5bf9\u8c61\u548c\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u901a\u5e38\u7528\u4e8e\u7f13\u5b58\u6216\u8005\u8ba1\u6570\u529f\u80fd\u3002Redis \u7684\u5b57\u7b26\u4e32\u6700\u5927\u80fd\u5b58\u50a8 512M \u5b57\u8282\u3002</p>"},{"location":"redis/%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/Strings/#_2","title":"\u65f6\u95f4\u590d\u6742\u5ea6","text":"<p>Redis \u5b57\u7b26\u4e32\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u90e8\u5206\u90fd\u662f O(1)\uff0c\u53ea\u6709\u5c11\u6570\u64cd\u4f5c\u5982 STRLEN\u3001GETRANGE\u3001SETRANGE \u662f O(N)\u3002</p>"},{"location":"redis/%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/Strings/#_3","title":"\u57fa\u672c\u4f7f\u7528\u547d\u4ee4","text":"<ul> <li>GET\u3001SET\uff1a\u8bbe\u7f6e/\u68c0\u7d22\u5355\u4e2a\u503c</li> <li>APPEN: \u5b57\u7b26\u4e32\u672b\u5c3e\u62fc\u63a5\u65b0\u503c\uff0c\u4f1a\u5bfc\u81f4\u5b57\u7b26\u4e32\u7c7b\u578b\u5e95\u5c42\u6570\u636e\u7ed3\u6784</li> <li>MGET\u3001MSET: \u8bbe\u7f6e/\u68c0\u7d22\u591a\u4e2a\u503c(\u51cf\u5c11\u591a\u6b21\u8bf7\u6c42\u5ef6\u8fdf)</li> <li>INCR\u3001DECR\u3001INCRBY\u3001DECRY\uff1a\u81ea\u589e/\u81ea\u51cf 1 \u6216\u8005\u7ed9\u5b9a\u6570\u503c\uff0c\u662f\u539f\u5b50\u64cd\u4f5c</li> <li>STRLEN: \u83b7\u53d6\u5b57\u7b26\u4e32\u7684\u957f\u5ea6</li> </ul>"},{"location":"redis/%E6%BA%90%E7%A0%81/SDS%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/","title":"SDS\u52a8\u6001\u5b57\u7b26\u4e32","text":""},{"location":"redis/%E6%BA%90%E7%A0%81/SDS%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#c","title":"\u5bf9\u6bd4 C \u8bed\u8a00\u5b57\u7b26\u4e32","text":"<p>1.\u5b58\u50a8\u65b9\u5f0f</p> <ul> <li> <p>C \u8bed\u8a00\u5b57\u7b26\u4e32\u521b\u5efa\u540e\u957f\u5ea6\u56fa\u5b9a\uff0c\u4f7f\u7528 NULL \u4f5c\u4e3a\u7ed3\u5c3e\u3002\u4e0d\u80fd\u81ea\u52a8\u6269\u5bb9\uff0c\u5982\u679c\u5b58\u50a8\u7684\u6570\u636e\u8d85\u8fc7\u4e86\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u4f1a\u9020\u6210\u7f13\u51b2\u533a\u6ea2\u51fa\u3002</p> </li> <li> <p>Reids \u5b57\u7b26\u4e32\u662f\u4e8c\u8fdb\u5236\u5b89\u5168\u7684\u53ef\u4ee5\u5b58\u50a8\u4efb\u610f\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u6587\u672c\u3002Redis \u4f7f\u7528\u5b57\u8282\u6570\u7ec4\u6765\u8868\u793a\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u652f\u6301\u591a\u79cd\u7f16\u7801\u65b9\u5f0f\uff08\u5982 raw\u3001int\u3001embstr \u7b49\uff09\u6765\u4f18\u5316\u5b58\u50a8\u3002\u5185\u7f6e len \u5c5e\u6027\u8bb0\u5f55\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0cfree \u5c5e\u6027\u8bb0\u5f55\u5b57\u8282\u6570\u7ec4\u672a\u4f7f\u7528\u7684\u5b57\u8282\u6570\u91cf\uff0c\u652f\u6301\u81ea\u52a8\u6269\u5bb9\uff0c\u5e76\u4e14\u4e0d\u4f1a\u9020\u6210\u7f13\u51b2\u533a\u7684\u6ea2\u51fa\u3002</p> </li> </ul> <p>2.\u5b57\u7b26\u4e32\u64cd\u4f5c</p> <ul> <li> <p>C \u8bed\u8a00\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u5b57\u7b26\u4e32\u64cd\u4f5c\u51fd\u6570\uff0c\u5982 strlen\u3001strcpy\u3001strcat\u3001strcmp \u7b49\u3002</p> </li> <li> <p>Redis \u4e3a\u4e86\u590d\u7528 C \u8bed\u8a00\u7684\u5b57\u7b26\u4e32\u51fd\u6570\u4e5f\u4f1a\u5728\u5b57\u7b26\u4e32\u7ed3\u5c3e\u6dfb\u52a0\u4e00\u4e2a NULL\uff0c\u4f46\u662f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4e0d\u5305\u542b\u7a7a\u5b57\u7b26\u3002</p> </li> </ul> <p>3.\u5185\u5b58\u7ba1\u7406</p> <ul> <li> <p>C \u8bed\u8a00\u5b57\u7b26\u4e32\u9700\u8981\u624b\u52a8\u5206\u914d\uff0c\u5e76\u5728\u4f7f\u7528\u5b8c\u540e\u624b\u52a8\u91ca\u653e\u5185\u5b58\uff0c\u4ee5\u907f\u514d\u5185\u5b58\u6cc4\u6f0f\u3002</p> </li> <li> <p>Redis \u4f1a\u81ea\u52a8\u7ba1\u7406\u5b57\u7b26\u4e32\u7684\u5185\u5b58\u5206\u914d\u548c\u91ca\u653e\uff0c\u5e76\u4e14\u4f7f\u7528\u4e86\u9884\u5206\u914d\u673a\u5236\uff0c\u51cf\u5c11\u5185\u5b58\u5206\u914d\u7684\u6b21\u6570\uff0c\u63d0\u9ad8\u5185\u5b58\u4f7f\u7528\u7387\u3002\u5b57\u7b26\u4e32\u7f29\u5bb9\u540e\u5185\u5b58\u5e76\u4e0d\u4f1a\u88ab\u91ca\u653e\uff0c\u800c\u662f\u88ab\u8bb0\u5f55\u5230 free \u5c5e\u6027\u4e2d\uff0c\u4ee5\u4fbf\u4e0b\u6b21\u4f7f\u7528\u3002</p> </li> </ul>"},{"location":"redis/%E6%BA%90%E7%A0%81/SDS%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#_1","title":"\u6e90\u7801\u5206\u6790","text":""},{"location":"redis/%E6%BA%90%E7%A0%81/SDS%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#c_1","title":"C\u57fa\u7840\u77e5\u8bc6\u56de\u987e","text":""},{"location":"redis/%E6%BA%90%E7%A0%81/SDS%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#attribute","title":"attribute","text":"<pre><code>__attribute__ ((attribute-list))\n</code></pre> <p>attribute\u662fGCC\u7f16\u8bd1\u5668\uff08GNU Compiler Collection\uff09\u63d0\u4f9b\u7684\u4e00\u4e2a\u7279\u6027\uff0c\u7528\u4e8e\u5411\u7f16\u8bd1\u5668\u63d0\u4f9b\u989d\u5916\u7684\u6307\u793a\u6216\u5c5e\u6027\u3002\u5b83\u53ef\u4ee5\u7528\u4e8e\u4fee\u6539\u53d8\u91cf\u3001\u51fd\u6570\u3001\u7ed3\u6784\u4f53\u7b49\u7684\u884c\u4e3a\u6216\u7279\u6027\u3002</p> <p>\u5728redis\u6e90\u7801\u4e2d\u4f7f\u7528__attribute__ ((**packed**))\u5c06\u544a\u8bc9\u7f16\u8bd1\u5668\u4f7f\u75281\u4e2a\u5b57\u8282\u5bf9\u9f50\uff0c\u800c\u4e0d\u662f\u7f16\u8bd1\u5668\u9ed8\u8ba4\u7684\u5b57\u8282\u6570\u3002</p>"},{"location":"redis/%E6%BA%90%E7%A0%81/SDS%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#_2","title":"\u7075\u6d3b\u7684\u6570\u7ec4\u6210\u5458","text":"<p>\u4e5f\u88ab\u79f0\u4e3a \"struct hack\"\u3002\u5141\u8bb8\u7ed3\u6784\u7684\u6700\u540e\u4e00\u4e2a\u6210\u5458\u662f\u957f\u5ea6\u4e3a\u96f6\u7684\u6570\u7ec4\uff0c\u5982 <code>int</code> <code>foo[];</code>\u3002\u8fd9\u79cd\u7ed3\u6784\u4e00\u822c\u7528\u4f5c\u8bbf\u95ee malloc \u5185\u5b58\u7684\u5934\u6587\u4ef6\u3002</p> <p>\u4f8b\u5982\uff0c\u5728\u7ed3\u6784 <code>struct s { int n; double d[]; } S;</code> \u4e2d\uff0c\u6570\u7ec4 <code>d</code> \u662f\u4e0d\u5b8c\u6574\u6570\u7ec4\u7c7b\u578b\u3002\u5bf9\u4e8e <code>S</code> \u7684\u8be5\u6210\u5458\uff0cC \u7f16\u8bd1\u5668\u4e0d\u5bf9\u4efb\u4f55\u5185\u5b58\u504f\u79fb\u8fdb\u884c\u8ba1\u6570\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c<code>sizeof(struct s)</code> \u4e0e <code>S.n</code> \u7684\u504f\u79fb\u76f8\u540c\u3002</p> <p>\u53ef\u4ee5\u50cf\u4f7f\u7528\u4efb\u4f55\u666e\u901a\u6570\u7ec4\u6210\u5458\u4e00\u6837\u4f7f\u7528 <code>d</code>\u3002<code>S.d[10] = 0;</code>\u3002</p> <p>\u53c2\u8003\uff1aoracle C99\u6587\u6863</p>"},{"location":"redis/%E6%BA%90%E7%A0%81/SDS%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#_3","title":"\u6307\u9488\u56de\u987e","text":"<p>C\u8bed\u8a00\u6570\u7ec4\u540d\u53ef\u4ee5\u4f5c\u4e3a\u6307\u9488\u4f7f\u7528\u3002\u5f53\u6570\u7ec4\u540d\u51fa\u73b0\u5728\u8868\u8fbe\u5f0f\u4e2d\u65f6\uff0c\u5b83\u4f1a\u88ab\u9690\u5f0f\u5730\u8f6c\u6362\u4e3a\u6307\u5411\u6570\u7ec4\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u6307\u9488\u3002\u8fd9\u610f\u5473\u7740\u6570\u7ec4\u540d\u53ef\u4ee5\u88ab\u7528\u4f5c\u6307\u9488\u6765\u8bbf\u95ee\u6570\u7ec4\u5143\u7d20\u3002</p> <p>\u6570\u7ec4\u540d\u4f5c\u4e3a\u6307\u9488:</p> <ul> <li> <p>\u4f8b\u5982\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u6574\u578b\u6570\u7ec4 <code>int arr[5]</code>\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>arr</code> \u6765\u8bbf\u95ee\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5c31\u50cf\u4f7f\u7528\u6307\u9488\u4e00\u6837\uff1a<code>*arr</code> \u6216 <code>arr[0]</code>\u3002</p> </li> <li> <p>\u6570\u7ec4\u540d\u505a\u4e3a\u6307\u9488\u662f\u4e00\u4e2a\u53ea\u8bfb\u6307\u9488\uff0c\u65e0\u6cd5\u88ab\u4fee\u6539\u3002\u5982\u679c\u4f7f\u7528arr= &amp;(variables)\u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c\uff0c\u5c06\u4f1a\u62a5\u9519\u3002</p> </li> </ul> <p>\u6570\u7ec4\u540d\u4f5c\u4e3a\u6570\u7ec4\uff1a</p> <ul> <li>\u5f53\u6570\u7ec4\u540d\u51fa\u73b0\u5728 <code>sizeof</code> \u8fd0\u7b97\u7b26\u7684\u64cd\u4f5c\u6570\u4e2d\u65f6\uff0c\u5b83\u8868\u793a\u6574\u4e2a\u6570\u7ec4\u7684\u5927\u5c0f\u3002</li> <li>\u5f53\u65f6\u7528\u53d6\u5730\u5740\u7b26\u65f6\uff0carr\u4ee3\u8868\u6570\u7ec4\u3002</li> </ul> <p>\u5728C\u8bed\u8a00\u4e2d\uff0c\u6307\u9488\u548c\u6570\u7ec4\u4e4b\u95f4\u6709\u4e00\u79cd\u7b49\u4ef7\u5173\u7cfb\u3002</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main(int argc, char *argv[]) {\n    char buf[] = \"hello world!\";\n    char *s;\n    s = buf;\n    printf(\"buf pointer: %p\\n\", buf); \n    printf(\"s pointer: %p\\n\", s);   \n    printf(\"buf+1 pointer: %p\\n\", buf+1);\n    printf(\"buf[1] pointer: %p\\n\", buf[1]);\n    printf(\"s+1 pointer: %p\\n\", s+1);\n    printf(\"s[1] pointer: %p\\n\", s[1]);\n}\n\n// output\n// buf pointer: 0x16b7c3388\n// s pointer: 0x16b7c3388\n// buf+1 pointer: 0x16b7c3389\n// buf[1] pointer: 0x16b7c3389\n// s+1 pointer: 0x16b7c3389\n// s[1] pointer: 0x16b7c3389\n</code></pre>"},{"location":"redis/%E6%BA%90%E7%A0%81/SDS%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#sdshdr","title":"sdshdr\u7ed3\u6784\u4f53","text":"sds.h<pre><code>struct __attribute__ ((__packed__)) sdshdr5 {\n    unsigned char flags; /* \u4f4e3\u4f4d\u5b58\u50a8\u7c7b\u578b\uff0c\u9ad85\u4f4d\u5b58\u50a8\u957f\u5ea6\u3002\u4f4e\u4e09\u4f4d\u5bf9\u5e94\u7684\u503c\u4e3aSDS_TYPE_8*/\n    char buf[];\n};\nstruct __attribute__ ((__packed__)) sdshdr8 {\n    uint8_t len; /* buf\u4e2d\u5df2\u4f7f\u7528\u957f\u5ea6 */\n    uint8_t alloc; /* buf\u5206\u914d\u5185\u5b58\u603b\u957f\u5ea6 */\n    unsigned char flags; /* \u53ea\u6709\u4f4e\u4e09\u4f4d\u88ab\u4f7f\u7528\uff0c\u7528\u6765\u6807\u8bb0\u7c7b\u578b\u3002\u4f4e\u4e09\u4f4d\u5bf9\u5e94\u7684\u503c\u4e3aSDS_TYPE_8*/\n    char buf[];\n};\nstruct __attribute__ ((__packed__)) sdshdr16 {\n    uint16_t len; /* buf\u4e2d\u5df2\u4f7f\u7528\u957f\u5ea6 */\n    uint16_t alloc; /* buf\u5206\u914d\u5185\u5b58\u603b\u957f\u5ea6 */\n    unsigned char flags; /* \u53ea\u6709\u4f4e\u4e09\u4f4d\u88ab\u4f7f\u7528\uff0c\u7528\u6765\u6807\u8bb0\u7c7b\u578b\u3002\u4f4e\u4e09\u4f4d\u5bf9\u5e94\u7684\u503c\u4e3aSDS_TYPE_16 */\n    char buf[];\n};\nstruct __attribute__ ((__packed__)) sdshdr32 {\n    uint32_t len; /* buf\u4e2d\u5df2\u4f7f\u7528\u957f\u5ea6 */\n    uint32_t alloc; /* buf\u5206\u914d\u5185\u5b58\u603b\u957f\u5ea6 */\n    unsigned char flags; /* \u53ea\u6709\u4f4e\u4e09\u4f4d\u88ab\u4f7f\u7528\uff0c\u7528\u6765\u6807\u8bb0\u7c7b\u578b\u3002\u4f4e\u4e09\u4f4d\u5bf9\u5e94\u7684\u503c\u4e3aSDS_TYPE_32 */\n    char buf[];\n};\nstruct __attribute__ ((__packed__)) sdshdr64 {\n    uint64_t len; /* buf\u4e2d\u5df2\u4f7f\u7528\u957f\u5ea6 */\n    uint64_t alloc; /* buf\u5206\u914d\u5185\u5b58\u603b\u957f\u5ea6 */\n    unsigned char flags; /* \u53ea\u6709\u4f4e\u4e09\u4f4d\u88ab\u4f7f\u7528\uff0c\u7528\u6765\u6807\u8bb0\u7c7b\u578b\u3002\u4f4e\u4e09\u4f4d\u5bf9\u5e94\u7684\u503c\u4e3aSDS_TYPE_64*/\n    char buf[];\n};\n\n// sdshdr\u4e2dflags\u7684\u4f4e3\u4f4d\u5b58\u50a8\u7684\u503c\n#define SDS_TYPE_5  0\n#define SDS_TYPE_8  1\n#define SDS_TYPE_16 2\n#define SDS_TYPE_32 3\n#define SDS_TYPE_64 4\n#define SDS_TYPE_MASK 7 // \u4f7f\u7528&amp;\u8fd0\u7b97\u83b7\u53d6\u4f4e3\u4f4d\u7684\u503c\n#define SDS_TYPE_BITS 3\n</code></pre>"},{"location":"redis/%E6%BA%90%E7%A0%81/SDS%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#sdshdr_1","title":"\u83b7\u53d6sdshdr*\u7ed3\u6784\u4f53\u5730\u5740","text":"<p>1.\u56e0\u4e3a__attribute__ ((**packed**))\u4fee\u9970\u7ed3\u6784\u4f53\u4f7f\u7528\u4e00\u4e2a\u5b57\u8282\u5bf9\u9f50\uff0cs-1 \u5c31\u53ef\u4ee5\u6307\u5411flags</p> <p>2.\u901a\u8fc7flags\u4f4e\u4e09\u4f4d\u83b7\u53d6\u5230\u5177\u4f53\u7c7b\u578b</p> <p>3.\u4f7f\u7528s-sizeof(struct shshdr*)\u83b7\u53d6\u5230\u7ed3\u6784\u4f53\u6307\u9488</p> sds.c<pre><code>static inline int sdsHdrSize(char type) {\n    switch(type&amp;SDS_TYPE_MASK) {\n        case SDS_TYPE_5:\n            return sizeof(struct sdshdr5); // sizeof(sdshdr4) = flags(1) = 1\n        case SDS_TYPE_8:\n            return sizeof(struct sdshdr8); // sizeof(sdshdr8) = len(1) + alloc(1) + 1(flags)= 3\n        case SDS_TYPE_16:\n            return sizeof(struct sdshdr16); // sizeof(sdshdr16) = len(2) + alloc(2) + 1(flags)= 5\n        case SDS_TYPE_32:\n            return sizeof(struct sdshdr32); // sizeof(sdshdr32) = len(4) + alloc(4) + 1(flags)= 9\n        case SDS_TYPE_64:\n            return sizeof(struct sdshdr64); // sizeof(sdshdr64) = len(8) + alloc(8) + 1(flags)= 17\n    }\n    return 0;\n}\n\nvoid *sdsAllocPtr(sds s) {\n    return (void*) (s-sdsHdrSize(s[-1]));\n}\n</code></pre>"},{"location":"redis/%E6%BA%90%E7%A0%81/SDS%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#_4","title":"\u521b\u5efa\u5b57\u7b26\u4e32","text":"<ul> <li>\u521b\u5efa\u7a7a\u5b57\u7b26\u4e32\u65f6\uff0c\u5c06 SDS_TYPE_5 \u5f3a\u5236\u8f6c\u6362\u6210 SDS_TYPE_8(\u6ce8\u91ca\u4e2d\u8bf4\uff1a\u7a7a\u5b57\u7b26\u4e32\u5e38\u7528\u4e8e\u8ffd\u52a0\uff0cSDS_TYPE_5 \u7684\u6548\u679c\u6ca1\u6709 SDS_TYPE_8 \u6548\u679c\u597d\uff0c\u731c\u6d4b\u662f\u53ef\u80fd\u8ffd\u52a0\u7684\u5b57\u8282\u4e00\u822c\u90fd\u5927\u4e8e 31 \u4e2a\u5b57\u8282)</li> <li>\u5185\u5b58\u5206\u914d\u65f6\uff0c\u4f1a\u591a\u5206\u914d\u4e00\u4e2a\u5b57\u8282\uff0c\u7528\u4e8e\u5b58\u50a8\u5b57\u7b26\u4e32\u7684\u7ed3\u675f\u7b26 '\\0'\uff0c\u4f46\u662f len \u548calloc\u4e0d\u4f1a\u8ba1\u7b97\u672b\u5c3enull</li> <li>\u8fd4\u56de\u503c\u662f\u6307\u5411\u662f sds(char *), \u800c\u4e0d\u662f sdshdr \u7ed3\u6784\u4f53\u7684\u6307\u9488\uff0c\u8fd9\u6837\u8fd4\u56de\u7684\u5b57\u7b26\u6307\u9488\u53ef\u4ee5\u65b9\u4fbf\u7684\u4f7f\u7528 C \u8bed\u8a00\u5b57\u7b26\u4e32\u51fd\u6570\uff0c\u5982\u679c\u60f3\u8981\u8bbf\u95ee\u7ed3\u6784\u4f53\u5176\u4ed6\u5b57\u6bb5\u53ef\u4ee5\u4f7f\u7528\u6307\u9488\u504f\u79fb\u7684\u65b9\u5f0f\u8bbf\u95ee</li> </ul> sds.c<pre><code>typedef char *sds;\n\nsds sdsnewlen(const void *init, size_t initlen) {\n    return _sdsnewlen(init, initlen, 0);\n}\n\n// \u8ba1\u7b97\u4e0d\u540csdshder\u7c7b\u578b\u5141\u8bb8\u7684\u6700\u5927\u957f\u5ea6\nstatic inline size_t sdsTypeMaxSize(char type) {\n    if (type == SDS_TYPE_5)\n        return (1&lt;&lt;5) - 1;\n    if (type == SDS_TYPE_8)\n        return (1&lt;&lt;8) - 1;\n    if (type == SDS_TYPE_16)\n        return (1&lt;&lt;16) - 1;\n#if (LONG_MAX == LLONG_MAX)\n    if (type == SDS_TYPE_32)\n        return (1ll&lt;&lt;32) - 1;\n#endif\n    return -1; /* this is equivalent to the max SDS_TYPE_64 or SDS_TYPE_32 */\n}\n\nsds _sdsnewlen(const void *init, size_t initlen, int trymalloc) {\n    void *sh;\n    sds s;\n    char type = sdsReqType(initlen);\n    /* \u7a7a\u5b57\u7b26\u4e32\u901a\u5e38\u7528\u4e8e\u8ffd\u52a0\u3002\u4f7f\u7528\u7c7b\u578b8\uff0c\u56e0\u4e3a\u7c7b\u578b5\u5728\u8fd9\u65b9\u9762\u6548\u679c\u4e0d\u597d. */\n    if (type == SDS_TYPE_5 &amp;&amp; initlen == 0) type = SDS_TYPE_8;\n    int hdrlen = sdsHdrSize(type);\n    unsigned char *fp; /* flags pointer. */\n    size_t usable;\n\n    assert(initlen + hdrlen + 1 &gt; initlen); /* Catch size_t overflow */\n    sh = trymalloc?\n        s_trymalloc_usable(hdrlen+initlen+1, &amp;usable) :\n        s_malloc_usable(hdrlen+initlen+1, &amp;usable);\n    if (sh == NULL) return NULL;\n    if (init==SDS_NOINIT)\n        // init == \"SDS_NOINIT\"\u65f6\uff0c\u4e0d\u91cd\u7f6e\u5185\u5b58\u4e2d\u7684\u6570\u636e\u4e3a0\uff0c\u8282\u7701\u65f6\u95f4\n        init = NULL;\n    else if (!init)\n        // init\u6307\u9488\u4e3a\u7a7a\u65f6\uff0c\u91cd\u7f6e\u5185\u5b58\u4e2d\u7684\u6570\u636e\u4e3a0\n        memset(sh, 0, hdrlen+initlen+1);\n    // \u7ed3\u6784\u4f53buf\u6307\u5411\u7684\u5730\u5740 \n    s = (char*)sh+hdrlen;\n    // \u7ed3\u6784\u4f53flags\u6307\u5411\u7684\u5730\u5740\n    fp = ((unsigned char*)s)-1;\n    // \u5206\u914d\u7684\u5185\u5b58\u5b57\u8282\u6570-\u7ed3\u6784\u4f53\u5360\u7528\u5b57\u8282\u6570-NUll\u5b57\u8282\u6570=\u7ed3\u6784\u4f53\u4e2dbuf\u53ef\u7528\u7684\u5b57\u8282\u6570\n    usable = usable-hdrlen-1;\n    if (usable &gt; sdsTypeMaxSize(type))\n        usable = sdsTypeMaxSize(type);\n    switch(type) {\n        case SDS_TYPE_5: {\n            *fp = type | (initlen &lt;&lt; SDS_TYPE_BITS);\n            break;\n        }\n        case SDS_TYPE_8: {\n            SDS_HDR_VAR(8,s);\n            sh-&gt;len = initlen;\n            sh-&gt;alloc = usable;\n            *fp = type;\n            break;\n        }\n        case SDS_TYPE_16: {\n            SDS_HDR_VAR(16,s);\n            sh-&gt;len = initlen;\n            sh-&gt;alloc = usable;\n            *fp = type;\n            break;\n        }\n        case SDS_TYPE_32: {\n            SDS_HDR_VAR(32,s);\n            sh-&gt;len = initlen;\n            sh-&gt;alloc = usable;\n            *fp = type;\n            break;\n        }\n        case SDS_TYPE_64: {\n            SDS_HDR_VAR(64,s);\n            sh-&gt;len = initlen;\n            sh-&gt;alloc = usable;\n            *fp = type;\n            break;\n        }\n    }\n    // \u5c06init\u6307\u9488\u6307\u5411\u7684\u6570\u636e\u62f7\u8d1d\u5230sds\u5b57\u7b26\u4e32\u4e2d\n    if (initlen &amp;&amp; init)\n        memcpy(s, init, initlen);\n    s[initlen] = '\\0';\n    // \u8fd4\u56desds\u7684\u6307\u9488\uff0c\u800c\u4e0d\u662fSDSHDR\u7684\u6307\u9488\n    return s;\n}\n</code></pre>"},{"location":"redis/%E6%BA%90%E7%A0%81/SDS%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#sds","title":"\u5220\u9664sds","text":"<p>1.\u5982\u679c\u5b57\u7b26\u4e32\u662f NULL \u76f4\u63a5\u8fd4\u56de</p> <p>2.\u901a\u8fc7 s-1 \u83b7\u53d6\u5230 flags\uff0c\u5f97\u5230\u5bf9\u5e94\u7684\u7ed3\u6784\u4f53\u7c7b\u578b\u957f\u5ea6\uff0cs-sizeof(struct sdddr)\u83b7\u53d6\u5230\u7ed3\u6784\u4f53\u5730\u5740</p> <p>3.\u4f7f\u7528 free \u91ca\u653e\u7ed3\u6784\u4f53\u5730\u5740</p> sds.c<pre><code>/* \u91ca\u653e\u4e00\u4e2asds\u5b57\u7b26\u4e32\uff0c\u5982\u679cs\u662fNULL\u76f4\u63a5\u8fd4\u56de */\nvoid sdsfree(sds s) {\n    if (s == NULL) return;\n    s_free((char*)s-sdsHdrSize(s[-1]));\n}\n</code></pre>"},{"location":"redis/%E6%BA%90%E7%A0%81/SDS%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#sds_1","title":"\u91cd\u7f6esds\u957f\u5ea6","text":"<ul> <li>\u8001\u6837\u5b50 sds-1 \u83b7\u53d6 flags \uff0cflags&amp;SDS_TYPE_MASK \u83b7\u53d6\u5230\u7c7b\u578b\uff0cs-sizeof(struct sdddr)\u83b7\u53d6\u5230\u7ed3\u6784\u4f53\u5730\u5740</li> <li>\u901a\u8fc7\u83b7\u53d6\u5230\u7ed3\u6784\u4f53\u6307\u9488\uff0c\u7136\u540e\u5c06 sdshdr-&gt;len \u8bbe\u7f6e\u4e3a 0</li> </ul> sds.c<pre><code>void sdsclear(sds s) {\n    // \u8bbe\u7f6e\u7ed3\u6784\u4f53len\u5b57\u6bb5\n    sdssetlen(s, 0);\n    s[0] = '\\0';\n}\n</code></pre>"},{"location":"redis/%E6%BA%90%E7%A0%81/SDS%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#_5","title":"\u62fc\u63a5\u5b57\u7b26\u4e32(\u6269\u5bb9)","text":"sds.c<pre><code>sds sdscatsds(sds s, const sds t) {\n    return sdscatlen(s, t, sdslen(t));\n}\n\nsds sdscatlen(sds s, const void *t, size_t len) {\n    size_t curlen = sdslen(s);// \u83b7\u53d6\u5f53\u524d\u957f\u5ea6\n    s = sdsMakeRoomFor(s,len);  // \u68c0\u67e5\u65b0\u589e\u957f\u5ea6\u662f\u5426\u80fd\u88c5\u4e0b\n    if (s == NULL) return NULL;// \u5206\u914d\u5931\u8d25\u76f4\u63a5\u8fd4\u56de\n    memcpy(s+curlen, t, len);// \u76f4\u63a5\u62f7\u8d1d\u8ffd\u52a0\n    sdssetlen(s, curlen+len);// \u8bbe\u7f6e\u65b0\u7684\u957f\u5ea6\n    s[curlen+len] = '\\0';// \u7ed3\u5c3e\u8bbe\u7f6enull\n    return s;\n}\n\n/* \u6269\u5927 sds \u5b57\u7b26\u4e32\u672b\u5c3e\u7684\u53ef\u7528\u7a7a\u95f4,\n * \u8fd9\u6709\u52a9\u4e8e\u907f\u514d\u5728\u91cd\u590d\u8ffd\u52a0 sds \u65f6\u91cd\u590d\u91cd\u65b0\u5206\u914d. */\nsds sdsMakeRoomFor(sds s, size_t addlen) {\n    return _sdsMakeRoomFor(s, addlen, 1);\n}\n\nsds _sdsMakeRoomFor(sds s, size_t addlen, int greedy) {\n    void *sh, *newsh;\n    size_t avail = sdsavail(s);// \u83b7\u53d6\u53ef\u4ee5\u957f\u5ea6\uff0c alloc - len\n    size_t len, newlen, reqlen;\n    char type, oldtype = s[-1] &amp; SDS_TYPE_MASK;// \u521d\u59cb\u5316\u65b0\u7684type,\u5e76\u83b7\u53d6\u65e7\u7684type\uff0c\u540e\u9762\u8fdb\u884c\u6bd4\u8f83\n    int hdrlen; // \u7ed3\u6784\u4f53\u957f\u5ea6\n    size_t usable; // buf\u957f\u5ea6\n\n    /* \u5982\u679c\u6709\u8db3\u591f\u7684\u7a7a\u95f4\uff0c\u76f4\u63a5\u8fd4\u56de*/\n    if (avail &gt;= addlen) return s;\n\n    len = sdslen(s); //\u65e7\u7684len\n    sh = (char*)s-sdsHdrSize(oldtype); //\u7ed3\u6784\u4f53\u5730\u5740\n    reqlen = newlen = (len+addlen); // \u65e7\u7684len + \u9700\u8981\u589e\u52a0\u7684\u957f\u5ea6  = \u65b0\u7684\u957f\u5ea6\n    assert(newlen &gt; len);   /* Catch size_t overflow */\n    if (greedy == 1) {\n        if (newlen &lt; SDS_MAX_PREALLOC) // SDS_MAX_PREALLOC = 1024 * 1024 = 1M\uff0c\u65b0\u7684\u957f\u5ea6\u5c0f\u4e8e1M\uff0c\u5219\u6269\u5bb9\u4e24\u500d\n            newlen *= 2;\n        else\n            newlen += SDS_MAX_PREALLOC; // \u65b0\u7684\u957f\u5ea6\u5927\u4e8e1M\uff0c\u5219\u989d\u5916\u5206\u914d1M\n    }\n\n    type = sdsReqType(newlen); //\u6839\u636e\u957f\u5ea6\u5f97\u51fa\u65b0\u7684\u7c7b\u578b\uff0c\u56e0\u4e3a\u957f\u5ea6\u53ef\u80fd\u53d8\u5316\u5bfc\u81f4\u65e0\u6cd5\u627f\u8f7d\n\n    //\u5728Redis\u7684SDS\u5b9e\u73b0\u4e2d\uff0cSDS\u7c7b\u578b5\u662f\u4e00\u79cd\u4f18\u5316\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u79f0\u4e3a\"embstr\"\uff08embedded string\uff09\u3002\n    //\u5b83\u7684\u7279\u70b9\u662f\u5c06\u77ed\u5b57\u7b26\u4e32\u76f4\u63a5\u5b58\u50a8\u5728               SDS\u7ed3\u6784\u4f53\u4e2d\uff0c\u800c\u4e0d\u662f\u52a8\u6001\u5206\u914d\u989d\u5916\u7684\u7f13\u51b2\u533a\u3002\n    //\u7136\u800c\uff0c\u8fd9\u79cd\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u5e76\u4e0d\u9002\u7528\u4e8e\u9700\u8981\u9891\u7e41\u8fdb\u884c\u5b57\u7b26\u4e32\u8ffd\u52a0\u64cd\u4f5c\u7684\u573a\u666f\u3002\n    //\u56e0\u4e3a\u7c7b\u578b5\u7684SDS\u5b57\u7b26\u4e32\u4e0d\u4f1a\u8bb0\u4f4f\u7a7a\u95f2\u7a7a\u95f4\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u6b21\u8fdb\u884c\u5b57\u7b26\u4e32\u8ffd\u52a0\u64cd\u4f5c\u65f6\uff0c\u90fd\u9700\u8981\u8c03\u7528sdsMakeRoomFor()\u51fd\u6570\u6765\u786e\u4fdd\u6709\u8db3\u591f\u7684\u7a7a\u95f4\u3002\n    if (type == SDS_TYPE_5) type = SDS_TYPE_8;\n\n    hdrlen = sdsHdrSize(type);\n    assert(hdrlen + newlen + 1 &gt; reqlen);  /* Catch size_t overflow */\n    if (oldtype==type) {\n        // \u7c7b\u578b\u6ca1\u6709\u6539\u53d8\uff0c\u4f7f\u7528realloc\n        newsh = s_realloc_usable(sh, hdrlen+newlen+1, &amp;usable);\n        if (newsh == NULL) return NULL;\n        s = (char*)newsh+hdrlen;\n    } else {\n        /* \u7c7b\u578b\u6539\u53d8\uff0c\u4f7f\u7528malloc\u5206\u914d\u5185\u5b58\uff0c\u8c03\u6574\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e */\n        newsh = s_malloc_usable(hdrlen+newlen+1, &amp;usable);\n        if (newsh == NULL) return NULL;\n        memcpy((char*)newsh+hdrlen, s, len+1);\n        s_free(sh); // \u91ca\u653e\u65e7\u7684\n        s = (char*)newsh+hdrlen; // \u65b0\u7684buf\u5730\u5740\n        s[-1] = type; // \u65b0\u7684flags\n        sdssetlen(s, len); // \u8bbe\u7f6elen\n    }\n    usable = usable-hdrlen-1;\n    if (usable &gt; sdsTypeMaxSize(type))\n        usable = sdsTypeMaxSize(type);\n    sdssetalloc(s, usable); // \u8bbe\u7f6ealloc\n    return s;\n}\n</code></pre> <p>\u53c2\u8003\u8d44\u6599</p> <ul> <li>Redis\u8bbe\u8ba1\u4e0e\u5b9e\u73b0</li> <li>Redis5\u8bbe\u8ba1\u4e0e\u6e90\u7801\u5206\u6790</li> </ul>"}]}